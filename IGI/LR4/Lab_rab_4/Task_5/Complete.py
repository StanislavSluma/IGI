import numpy as np
from Checkinput import *


def complete_task5():
    print("UNIT A:")
    arr = np.array([[1,2,3],
                    [4,5,6]])
    print("1")
    print(arr)
    arr = np.ones((2,2,2), dtype=int)
    print("2")
    print(arr)
    arr = np.eye(4, k=1)
    print("3")
    print(arr)
    arr = np.arange(1, 9, 3)
    print("4")
    print(arr)
    arr = np.linspace(1, 2, 11)
    print("5")
    print(arr)
    arr = np.fromfunction(lambda i, j: (i+1)*(j+1), (4,6))
    print("6")
    print(arr)
    print("7")
    print(arr[2, 3])
    print("8")
    print(arr[:3, :2])
    print("9")
    print(arr[:, 3])
    print("10")
    print(arr[::-1])
    print("11")
    print(arr[:, ::-1])
    print("12")
    print(arr[::2, ::2])
    x = np.array([0,1,2,3,4], dtype=float)
    y = np.array([5,6,7,8,9], dtype=float)
    print("13")
    print(x + y)
    #print(y / x)
    print(x ** y)
    print(y ** -1)
    print(np.cos(x))
    print(x < 2)
    print("14")
    print(arr.sum())
    print(arr.min(axis=0))
    print(arr.max(axis=1))
    print("15")
    x = np.array([[1,2],[3,4]])
    y = np.array([[5,6],[7,8]])
    print(x.ravel())
    print(np.vstack((x, y)))
    print(np.hstack((x, y)))
    print("16")
    arr = np.arange(12).reshape(2,6)
    print(np.hsplit(arr, (3,4))) # + vsplit
    print("17")
    print(np.dot(x, y))
    print(np.transpose(x))
    print("UNIT B")
    print("1")
    arr = np.random.randint(-20, 20, 16).reshape((4,4))
    print(arr)
    #print(np.random.permutation(arr))
    print(arr.mean())
    print(arr.mean(axis=0))
    print("2")
    print(np.median(arr))
    print(np.median(arr, axis=1))
    print("3")
    print(np.corrcoef(arr))
    print(np.cov(arr))
    print("4")
    print(np.var(arr))
    print("5")
    print(np.std(arr))
    print("INDIVIDUAL WORK")
    print("Enter first dimension: ", end="")
    d1 = int_input(1, 10)
    print("Enter second dimension: ", end="")
    d2 = int_input(1, 10)
    if d1 * d2 % 2 != 0:
        d1 += 1
    arr = np.random.randint(-20, 20, d1*d2).reshape(d1, d2)
    print(arr)
    print(f"Minimal sum: {min(np.sum(arr, axis=1))}")
    print("Cov: ")
    arr = arr.ravel()
    print(arr)
    even_arr = arr[::2]
    odd_arr = arr[1::2]
    print(even_arr)
    print(odd_arr)
    print(np.cov(even_arr, odd_arr))